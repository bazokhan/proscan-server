# import Session, Guest, SessionSubscriptionPayload, Status from "prismaSchema"
type Query {
  userSessions: [Session!]
  sessionByID(publicId: String!): Session
  alreadyJoined(publicId: String!): Boolean
  activeSession(publicId: String!): Session
  activeSessions: [Session!]
}
type Mutation {
  createSession(publicId: String!): Session
  createQuestions(publicId: String!, data: [InputQuestion]): Session
  nextQuestion(publicId: String!): Session
  prevQuestion(publicId: String!): Session
  changeSessionStatus(publicId: String!, status: Status!): Session
  joinSession(publicId: String!, username: String): Guest
  answerQuestion(questionID: ID!, chooseID: ID!): Question
}

type Subscription {
  subToSessions: SubToSessions
  subToSession(publicId: String!): SubToSession
  subToQuestion(questionID: ID!): SubToQuestion
}

type SubToQuestion {
  questionID: ID!
  question: Question!
}
type SubToSession {
  mutation: SubToSessionMutationEnum
  publicId: String!
  session: Session!
}

enum SubToSessionMutationEnum {
  NextQuestion
  JoinSession
}

type SubToSessions {
  publicId: String!
  status: Status!
  session: Session!
}

input InputQuestion {
  id: String
  body: String!
  imageUrls: [String]
  choices: [InputChoice]
}

input InputChoice {
  id: String
  body: String!
  correct: Boolean
}
